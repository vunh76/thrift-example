/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef tcoin_TYPES_H
#define tcoin_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace tcoin { namespace v2 {

enum ErrorCode {
  OK = 0,
  UNAUTHORIZE = 1,
  INVALID_TOCKEN = 2,
  ACCOUNT_NOT_EXISTS = 3,
  ACCOUNT_EXISTS = 4,
  ACCOUNT_LOCKED = 5,
  NOT_ENOUGH_MONEY = 6,
  INVALID_PARAM = 7,
  EXECUTION_FAILED = 8,
  OPERATION_NOT_PERMIT = 9
};

enum ACC_STATUS {
  STATUS_ENABLED = 0,
  STATUS_LOCKED = 1
};

enum TRANS_TYPE {
  PAYMENT = 0,
  TRANSFER = 1,
  CASHIN = 2,
  EXCHANGE = 3
};

enum JOURNAL {
  DEBIT = 0,
  CREDIT = 1
};

typedef std::map<std::string, std::string>  SEARCH_COND;

typedef struct _tcoinException__isset {
  _tcoinException__isset() : what(false), why(false) {}
  bool what;
  bool why;
} _tcoinException__isset;

class tcoinException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  tcoinException() : why("") {
  }

  virtual ~tcoinException() throw() {}

  ErrorCode what;
  std::string why;

  _tcoinException__isset __isset;

  bool operator == (const tcoinException & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const tcoinException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoinException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _APP_INFO__isset {
  _APP_INFO__isset() : id(false), app_name(false), status(false), note(false), transfer(false), transfer_cost(false), cost_type(false), system_acc(false), unit(false), pid(false), ext(false) {}
  bool id;
  bool app_name;
  bool status;
  bool note;
  bool transfer;
  bool transfer_cost;
  bool cost_type;
  bool system_acc;
  bool unit;
  bool pid;
  bool ext;
} _APP_INFO__isset;

class APP_INFO {
 public:

  static const char* ascii_fingerprint; // = "8E236574CC71420C84FB911D6C6180A0";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x23,0x65,0x74,0xCC,0x71,0x42,0x0C,0x84,0xFB,0x91,0x1D,0x6C,0x61,0x80,0xA0};

  APP_INFO() : id(0), app_name(""), status(0), note(""), transfer(0), transfer_cost(0), cost_type(0), system_acc(0), unit(""), pid(0), ext(0) {
  }

  virtual ~APP_INFO() throw() {}

  int32_t id;
  std::string app_name;
  int32_t status;
  std::string note;
  int32_t transfer;
  double transfer_cost;
  int32_t cost_type;
  int32_t system_acc;
  std::string unit;
  int32_t pid;
  int32_t ext;

  _APP_INFO__isset __isset;

  bool operator == (const APP_INFO & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(note == rhs.note))
      return false;
    if (!(transfer == rhs.transfer))
      return false;
    if (!(transfer_cost == rhs.transfer_cost))
      return false;
    if (!(cost_type == rhs.cost_type))
      return false;
    if (!(system_acc == rhs.system_acc))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(pid == rhs.pid))
      return false;
    if (!(ext == rhs.ext))
      return false;
    return true;
  }
  bool operator != (const APP_INFO &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APP_INFO & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EX_RATE__isset {
  _EX_RATE__isset() : id(false), app1(false), app2(false), rate(false), cost(false), cost_type(false) {}
  bool id;
  bool app1;
  bool app2;
  bool rate;
  bool cost;
  bool cost_type;
} _EX_RATE__isset;

class EX_RATE {
 public:

  static const char* ascii_fingerprint; // = "DD805BABD9550C519A4542F2E02A4761";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x80,0x5B,0xAB,0xD9,0x55,0x0C,0x51,0x9A,0x45,0x42,0xF2,0xE0,0x2A,0x47,0x61};

  EX_RATE() : id(0), app1(0), app2(0), rate(0), cost(0), cost_type(0) {
  }

  virtual ~EX_RATE() throw() {}

  int32_t id;
  int32_t app1;
  int32_t app2;
  double rate;
  double cost;
  int32_t cost_type;

  _EX_RATE__isset __isset;

  bool operator == (const EX_RATE & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(app1 == rhs.app1))
      return false;
    if (!(app2 == rhs.app2))
      return false;
    if (!(rate == rhs.rate))
      return false;
    if (!(cost == rhs.cost))
      return false;
    if (!(cost_type == rhs.cost_type))
      return false;
    return true;
  }
  bool operator != (const EX_RATE &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EX_RATE & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ACC_INFO__isset {
  _ACC_INFO__isset() : id(false), uid(false), name(false), app(false), app_name(false), balance(false), promotion(false), created(false), changed(false), status(false) {}
  bool id;
  bool uid;
  bool name;
  bool app;
  bool app_name;
  bool balance;
  bool promotion;
  bool created;
  bool changed;
  bool status;
} _ACC_INFO__isset;

class ACC_INFO {
 public:

  static const char* ascii_fingerprint; // = "43C68D1939E179A888A1A3C5075C4468";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xC6,0x8D,0x19,0x39,0xE1,0x79,0xA8,0x88,0xA1,0xA3,0xC5,0x07,0x5C,0x44,0x68};

  ACC_INFO() : id(0), uid(0), name(""), app(0), app_name(""), balance(0), promotion(0), created(0), changed(0) {
  }

  virtual ~ACC_INFO() throw() {}

  int32_t id;
  int32_t uid;
  std::string name;
  int32_t app;
  std::string app_name;
  double balance;
  double promotion;
  int32_t created;
  int32_t changed;
  ACC_STATUS status;

  _ACC_INFO__isset __isset;

  bool operator == (const ACC_INFO & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(app_name == rhs.app_name))
      return false;
    if (!(balance == rhs.balance))
      return false;
    if (!(promotion == rhs.promotion))
      return false;
    if (!(created == rhs.created))
      return false;
    if (!(changed == rhs.changed))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ACC_INFO &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACC_INFO & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRANSACTION__isset {
  _TRANSACTION__isset() : tid(false), trans_type(false), trans_date(false), amount(false), promotion(false), description(false), system_note(false), credit_uid(false), credit_name(false), debit_uid(false), debit_name(false), credit_app(false), debit_app(false) {}
  bool tid;
  bool trans_type;
  bool trans_date;
  bool amount;
  bool promotion;
  bool description;
  bool system_note;
  bool credit_uid;
  bool credit_name;
  bool debit_uid;
  bool debit_name;
  bool credit_app;
  bool debit_app;
} _TRANSACTION__isset;

class TRANSACTION {
 public:

  static const char* ascii_fingerprint; // = "F991FCBE00C04C19DCCED5C7DFEE74B3";
  static const uint8_t binary_fingerprint[16]; // = {0xF9,0x91,0xFC,0xBE,0x00,0xC0,0x4C,0x19,0xDC,0xCE,0xD5,0xC7,0xDF,0xEE,0x74,0xB3};

  TRANSACTION() : tid(0), trans_date(0), amount(0), promotion(0), description(""), system_note(""), credit_uid(0), credit_name(""), debit_uid(0), debit_name(""), credit_app(0), debit_app(0) {
    trans_type = (TRANS_TYPE)0;

  }

  virtual ~TRANSACTION() throw() {}

  int32_t tid;
  TRANS_TYPE trans_type;
  int32_t trans_date;
  double amount;
  double promotion;
  std::string description;
  std::string system_note;
  int32_t credit_uid;
  std::string credit_name;
  int32_t debit_uid;
  std::string debit_name;
  int32_t credit_app;
  int32_t debit_app;

  _TRANSACTION__isset __isset;

  bool operator == (const TRANSACTION & rhs) const
  {
    if (!(tid == rhs.tid))
      return false;
    if (!(trans_type == rhs.trans_type))
      return false;
    if (!(trans_date == rhs.trans_date))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(promotion == rhs.promotion))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(system_note == rhs.system_note))
      return false;
    if (!(credit_uid == rhs.credit_uid))
      return false;
    if (!(credit_name == rhs.credit_name))
      return false;
    if (!(debit_uid == rhs.debit_uid))
      return false;
    if (!(debit_name == rhs.debit_name))
      return false;
    if (!(credit_app == rhs.credit_app))
      return false;
    if (!(debit_app == rhs.debit_app))
      return false;
    return true;
  }
  bool operator != (const TRANSACTION &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRANSACTION & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRANS_DETAIL__isset {
  _TRANS_DETAIL__isset() : id(false), tid(false), app(false), trans_date(false), trans_type(false), journal(false), description(false), uid(false), uname(false), amount(false), promotion(false), balance(false), promotion_balance(false) {}
  bool id;
  bool tid;
  bool app;
  bool trans_date;
  bool trans_type;
  bool journal;
  bool description;
  bool uid;
  bool uname;
  bool amount;
  bool promotion;
  bool balance;
  bool promotion_balance;
} _TRANS_DETAIL__isset;

class TRANS_DETAIL {
 public:

  static const char* ascii_fingerprint; // = "86F8444EBFDA8E73328A194DCEED802F";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0xF8,0x44,0x4E,0xBF,0xDA,0x8E,0x73,0x32,0x8A,0x19,0x4D,0xCE,0xED,0x80,0x2F};

  TRANS_DETAIL() : id(0), tid(0), app(0), trans_date(0), description(""), uid(0), uname(""), amount(0), promotion(0), balance(0), promotion_balance(0) {
    journal = (JOURNAL)0;

  }

  virtual ~TRANS_DETAIL() throw() {}

  int32_t id;
  int32_t tid;
  int32_t app;
  int32_t trans_date;
  TRANS_TYPE trans_type;
  JOURNAL journal;
  std::string description;
  int32_t uid;
  std::string uname;
  double amount;
  double promotion;
  double balance;
  double promotion_balance;

  _TRANS_DETAIL__isset __isset;

  bool operator == (const TRANS_DETAIL & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(trans_date == rhs.trans_date))
      return false;
    if (!(trans_type == rhs.trans_type))
      return false;
    if (!(journal == rhs.journal))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(uname == rhs.uname))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(promotion == rhs.promotion))
      return false;
    if (!(balance == rhs.balance))
      return false;
    if (!(promotion_balance == rhs.promotion_balance))
      return false;
    return true;
  }
  bool operator != (const TRANS_DETAIL &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRANS_DETAIL & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRANS_DETAIL_RESULT__isset {
  _TRANS_DETAIL_RESULT__isset() : trans_list(false), total(false) {}
  bool trans_list;
  bool total;
} _TRANS_DETAIL_RESULT__isset;

class TRANS_DETAIL_RESULT {
 public:

  static const char* ascii_fingerprint; // = "95C5D876E58DA536F73AD8AB57FAE2CA";
  static const uint8_t binary_fingerprint[16]; // = {0x95,0xC5,0xD8,0x76,0xE5,0x8D,0xA5,0x36,0xF7,0x3A,0xD8,0xAB,0x57,0xFA,0xE2,0xCA};

  TRANS_DETAIL_RESULT() : total(0) {
  }

  virtual ~TRANS_DETAIL_RESULT() throw() {}

  std::vector<TRANS_DETAIL>  trans_list;
  int32_t total;

  _TRANS_DETAIL_RESULT__isset __isset;

  bool operator == (const TRANS_DETAIL_RESULT & rhs) const
  {
    if (!(trans_list == rhs.trans_list))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const TRANS_DETAIL_RESULT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRANS_DETAIL_RESULT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRANS_SEARCH_RESULT__isset {
  _TRANS_SEARCH_RESULT__isset() : trans_list(false), total(false) {}
  bool trans_list;
  bool total;
} _TRANS_SEARCH_RESULT__isset;

class TRANS_SEARCH_RESULT {
 public:

  static const char* ascii_fingerprint; // = "1536BCB869E3FDB27ED64501D20AC078";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x36,0xBC,0xB8,0x69,0xE3,0xFD,0xB2,0x7E,0xD6,0x45,0x01,0xD2,0x0A,0xC0,0x78};

  TRANS_SEARCH_RESULT() : total(0) {
  }

  virtual ~TRANS_SEARCH_RESULT() throw() {}

  std::vector<TRANSACTION>  trans_list;
  int32_t total;

  _TRANS_SEARCH_RESULT__isset __isset;

  bool operator == (const TRANS_SEARCH_RESULT & rhs) const
  {
    if (!(trans_list == rhs.trans_list))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const TRANS_SEARCH_RESULT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRANS_SEARCH_RESULT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ACC_SEARCH_RESULT__isset {
  _ACC_SEARCH_RESULT__isset() : acc_list(false), total(false) {}
  bool acc_list;
  bool total;
} _ACC_SEARCH_RESULT__isset;

class ACC_SEARCH_RESULT {
 public:

  static const char* ascii_fingerprint; // = "618E7CC75B502B9294CC21DA495D7335";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x8E,0x7C,0xC7,0x5B,0x50,0x2B,0x92,0x94,0xCC,0x21,0xDA,0x49,0x5D,0x73,0x35};

  ACC_SEARCH_RESULT() : total(0) {
  }

  virtual ~ACC_SEARCH_RESULT() throw() {}

  std::vector<ACC_INFO>  acc_list;
  int32_t total;

  _ACC_SEARCH_RESULT__isset __isset;

  bool operator == (const ACC_SEARCH_RESULT & rhs) const
  {
    if (!(acc_list == rhs.acc_list))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const ACC_SEARCH_RESULT &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ACC_SEARCH_RESULT & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
