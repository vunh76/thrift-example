/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "tcoin_types.h"

namespace tcoin { namespace v2 {

const char* tcoinException::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t tcoinException::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t tcoinException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->what = (ErrorCode)ecast0;
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t tcoinException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("tcoinException");
  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->what);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* APP_INFO::ascii_fingerprint = "8E236574CC71420C84FB911D6C6180A0";
const uint8_t APP_INFO::binary_fingerprint[16] = {0x8E,0x23,0x65,0x74,0xCC,0x71,0x42,0x0C,0x84,0xFB,0x91,0x1D,0x6C,0x61,0x80,0xA0};

uint32_t APP_INFO::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->note);
          this->__isset.note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transfer);
          this->__isset.transfer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->transfer_cost);
          this->__isset.transfer_cost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cost_type);
          this->__isset.cost_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->system_acc);
          this->__isset.system_acc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ext);
          this->__isset.ext = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t APP_INFO::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("APP_INFO");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("note", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->note);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transfer", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->transfer);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transfer_cost", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->transfer_cost);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cost_type", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->cost_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("system_acc", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->system_acc);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->pid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ext", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->ext);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* EX_RATE::ascii_fingerprint = "DD805BABD9550C519A4542F2E02A4761";
const uint8_t EX_RATE::binary_fingerprint[16] = {0xDD,0x80,0x5B,0xAB,0xD9,0x55,0x0C,0x51,0x9A,0x45,0x42,0xF2,0xE0,0x2A,0x47,0x61};

uint32_t EX_RATE::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app1);
          this->__isset.app1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app2);
          this->__isset.app2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cost);
          this->__isset.cost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cost_type);
          this->__isset.cost_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EX_RATE::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("EX_RATE");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("app1", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->app1);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("app2", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->app2);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("rate", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->rate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cost", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->cost);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cost_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->cost_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ACC_INFO::ascii_fingerprint = "43C68D1939E179A888A1A3C5075C4468";
const uint8_t ACC_INFO::binary_fingerprint[16] = {0x43,0xC6,0x8D,0x19,0x39,0xE1,0x79,0xA8,0x88,0xA1,0xA3,0xC5,0x07,0x5C,0x44,0x68};

uint32_t ACC_INFO::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app);
          this->__isset.app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_name);
          this->__isset.app_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->balance);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->promotion);
          this->__isset.promotion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->created);
          this->__isset.created = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->changed);
          this->__isset.changed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->status = (ACC_STATUS)ecast1;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ACC_INFO::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ACC_INFO");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->app);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("app_name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->app_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->balance);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("promotion", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->promotion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("created", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->created);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("changed", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->changed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TRANSACTION::ascii_fingerprint = "F991FCBE00C04C19DCCED5C7DFEE74B3";
const uint8_t TRANSACTION::binary_fingerprint[16] = {0xF9,0x91,0xFC,0xBE,0x00,0xC0,0x4C,0x19,0xDC,0xCE,0xD5,0xC7,0xDF,0xEE,0x74,0xB3};

uint32_t TRANSACTION::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->trans_type = (TRANS_TYPE)ecast2;
          this->__isset.trans_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trans_date);
          this->__isset.trans_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->amount);
          this->__isset.amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->promotion);
          this->__isset.promotion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->system_note);
          this->__isset.system_note = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->credit_uid);
          this->__isset.credit_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->credit_name);
          this->__isset.credit_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->debit_uid);
          this->__isset.debit_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->debit_name);
          this->__isset.debit_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->credit_app);
          this->__isset.credit_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->debit_app);
          this->__isset.debit_app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRANSACTION::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRANSACTION");
  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->tid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trans_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->trans_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trans_date", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->trans_date);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->amount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("promotion", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->promotion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("system_note", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->system_note);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("credit_uid", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->credit_uid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("credit_name", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->credit_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("debit_uid", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->debit_uid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("debit_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->debit_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("credit_app", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->credit_app);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("debit_app", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->debit_app);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TRANS_DETAIL::ascii_fingerprint = "86F8444EBFDA8E73328A194DCEED802F";
const uint8_t TRANS_DETAIL::binary_fingerprint[16] = {0x86,0xF8,0x44,0x4E,0xBF,0xDA,0x8E,0x73,0x32,0x8A,0x19,0x4D,0xCE,0xED,0x80,0x2F};

uint32_t TRANS_DETAIL::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->app);
          this->__isset.app = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->trans_date);
          this->__isset.trans_date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->trans_type = (TRANS_TYPE)ecast3;
          this->__isset.trans_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->journal = (JOURNAL)ecast4;
          this->__isset.journal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uname);
          this->__isset.uname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->amount);
          this->__isset.amount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->promotion);
          this->__isset.promotion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->balance);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->promotion_balance);
          this->__isset.promotion_balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRANS_DETAIL::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRANS_DETAIL");
  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("app", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->app);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trans_date", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->trans_date);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("trans_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->trans_type);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("journal", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32((int32_t)this->journal);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("uname", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->uname);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("amount", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->amount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("promotion", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->promotion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->balance);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("promotion_balance", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->promotion_balance);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TRANS_DETAIL_RESULT::ascii_fingerprint = "95C5D876E58DA536F73AD8AB57FAE2CA";
const uint8_t TRANS_DETAIL_RESULT::binary_fingerprint[16] = {0x95,0xC5,0xD8,0x76,0xE5,0x8D,0xA5,0x36,0xF7,0x3A,0xD8,0xAB,0x57,0xFA,0xE2,0xCA};

uint32_t TRANS_DETAIL_RESULT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->trans_list.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->trans_list.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->trans_list[_i9].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.trans_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRANS_DETAIL_RESULT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRANS_DETAIL_RESULT");
  xfer += oprot->writeFieldBegin("trans_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->trans_list.size());
    std::vector<TRANS_DETAIL> ::const_iterator _iter10;
    for (_iter10 = this->trans_list.begin(); _iter10 != this->trans_list.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TRANS_SEARCH_RESULT::ascii_fingerprint = "1536BCB869E3FDB27ED64501D20AC078";
const uint8_t TRANS_SEARCH_RESULT::binary_fingerprint[16] = {0x15,0x36,0xBC,0xB8,0x69,0xE3,0xFD,0xB2,0x7E,0xD6,0x45,0x01,0xD2,0x0A,0xC0,0x78};

uint32_t TRANS_SEARCH_RESULT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->trans_list.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            iprot->readListBegin(_etype14, _size11);
            this->trans_list.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += this->trans_list[_i15].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.trans_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TRANS_SEARCH_RESULT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TRANS_SEARCH_RESULT");
  xfer += oprot->writeFieldBegin("trans_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->trans_list.size());
    std::vector<TRANSACTION> ::const_iterator _iter16;
    for (_iter16 = this->trans_list.begin(); _iter16 != this->trans_list.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ACC_SEARCH_RESULT::ascii_fingerprint = "618E7CC75B502B9294CC21DA495D7335";
const uint8_t ACC_SEARCH_RESULT::binary_fingerprint[16] = {0x61,0x8E,0x7C,0xC7,0x5B,0x50,0x2B,0x92,0x94,0xCC,0x21,0xDA,0x49,0x5D,0x73,0x35};

uint32_t ACC_SEARCH_RESULT::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->acc_list.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            iprot->readListBegin(_etype20, _size17);
            this->acc_list.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->acc_list[_i21].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.acc_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ACC_SEARCH_RESULT::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ACC_SEARCH_RESULT");
  xfer += oprot->writeFieldBegin("acc_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->acc_list.size());
    std::vector<ACC_INFO> ::const_iterator _iter22;
    for (_iter22 = this->acc_list.begin(); _iter22 != this->acc_list.end(); ++_iter22)
    {
      xfer += (*_iter22).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->total);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
