/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef tcoin_H
#define tcoin_H

#include <TProcessor.h>
#include "tcoin_types.h"

namespace tcoin { namespace v2 {

class tcoinIf {
 public:
  virtual ~tcoinIf() {}
  virtual void getAccountInfo(ACC_INFO& _return, const std::string& tocken, const int32_t app, const int32_t uid) = 0;
  virtual double getBalance(const std::string& tocken, const int32_t app, const int32_t uid) = 0;
  virtual int32_t createAccount(const std::string& tocken, const int32_t app, const int32_t uid, const std::string& name) = 0;
  virtual int32_t cashIn(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description) = 0;
  virtual int32_t cashIn2(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description, const double promotion) = 0;
  virtual int32_t transfer(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description) = 0;
  virtual int32_t transfer2(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description, const double cost) = 0;
  virtual int32_t exchange(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description) = 0;
  virtual int32_t exchange2(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description, const double promotion_amount) = 0;
  virtual void searchUserTransaction(TRANS_DETAIL_RESULT& _return, const std::string& tocken, const int32_t app, const int32_t uid, const SEARCH_COND& cond, const int32_t page, const int32_t limit) = 0;
  virtual void getExchangeRate(EX_RATE& _return, const std::string& tocken, const int32_t app1, const int32_t app2) = 0;
  virtual void getUserAccountList(std::vector<ACC_INFO> & _return, const std::string& tocken, const int32_t uid) = 0;
  virtual void getTransferableUserAccountList(std::vector<ACC_INFO> & _return, const std::string& tocken, const int32_t uid) = 0;
  virtual void getAppInfo(APP_INFO& _return, const std::string& tocken, const int32_t app) = 0;
  virtual void payment(std::map<int32_t, double> & _return, const std::string& tocken, const int32_t app, const std::vector<int32_t> & cre_uid, const std::vector<double> & cre_amt, const std::vector<std::string> & cre_desc, const std::vector<int32_t> & deb_uid, const std::vector<std::string> & deb_name, const std::vector<double> & deb_amt, const std::vector<std::string> & deb_desc) = 0;
  virtual ACC_STATUS getAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid) = 0;
  virtual int32_t setAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid, const ACC_STATUS status) = 0;
  virtual void searchTransaction(TRANS_SEARCH_RESULT& _return, const std::string& tocken, const SEARCH_COND& cond) = 0;
  virtual void searchAccount(ACC_SEARCH_RESULT& _return, const std::string& tocken, const SEARCH_COND& cond, const int32_t page, const int32_t limit) = 0;
};

class tcoinNull : virtual public tcoinIf {
 public:
  virtual ~tcoinNull() {}
  void getAccountInfo(ACC_INFO& /* _return */, const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */) {
    return;
  }
  double getBalance(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */) {
    double _return = (double)0;
    return _return;
  }
  int32_t createAccount(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t cashIn(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const double /* amount */, const std::string& /* description */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t cashIn2(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const double /* amount */, const std::string& /* description */, const double /* promotion */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t transfer(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid1 */, const int32_t /* uid2 */, const std::string& /* uname2 */, const double /* amount */, const std::string& /* description */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t transfer2(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid1 */, const int32_t /* uid2 */, const std::string& /* uname2 */, const double /* amount */, const std::string& /* description */, const double /* cost */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t exchange(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const int32_t /* to_app */, const double /* amount */, const std::string& /* description */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t exchange2(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const int32_t /* to_app */, const double /* amount */, const std::string& /* description */, const double /* promotion_amount */) {
    int32_t _return = 0;
    return _return;
  }
  void searchUserTransaction(TRANS_DETAIL_RESULT& /* _return */, const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const SEARCH_COND& /* cond */, const int32_t /* page */, const int32_t /* limit */) {
    return;
  }
  void getExchangeRate(EX_RATE& /* _return */, const std::string& /* tocken */, const int32_t /* app1 */, const int32_t /* app2 */) {
    return;
  }
  void getUserAccountList(std::vector<ACC_INFO> & /* _return */, const std::string& /* tocken */, const int32_t /* uid */) {
    return;
  }
  void getTransferableUserAccountList(std::vector<ACC_INFO> & /* _return */, const std::string& /* tocken */, const int32_t /* uid */) {
    return;
  }
  void getAppInfo(APP_INFO& /* _return */, const std::string& /* tocken */, const int32_t /* app */) {
    return;
  }
  void payment(std::map<int32_t, double> & /* _return */, const std::string& /* tocken */, const int32_t /* app */, const std::vector<int32_t> & /* cre_uid */, const std::vector<double> & /* cre_amt */, const std::vector<std::string> & /* cre_desc */, const std::vector<int32_t> & /* deb_uid */, const std::vector<std::string> & /* deb_name */, const std::vector<double> & /* deb_amt */, const std::vector<std::string> & /* deb_desc */) {
    return;
  }
  ACC_STATUS getAccountStatus(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */) {
    ACC_STATUS _return = (ACC_STATUS)0;
    return _return;
  }
  int32_t setAccountStatus(const std::string& /* tocken */, const int32_t /* app */, const int32_t /* uid */, const ACC_STATUS /* status */) {
    int32_t _return = 0;
    return _return;
  }
  void searchTransaction(TRANS_SEARCH_RESULT& /* _return */, const std::string& /* tocken */, const SEARCH_COND& /* cond */) {
    return;
  }
  void searchAccount(ACC_SEARCH_RESULT& /* _return */, const std::string& /* tocken */, const SEARCH_COND& /* cond */, const int32_t /* page */, const int32_t /* limit */) {
    return;
  }
};

typedef struct _tcoin_getAccountInfo_args__isset {
  _tcoin_getAccountInfo_args__isset() : tocken(false), app(false), uid(false) {}
  bool tocken;
  bool app;
  bool uid;
} _tcoin_getAccountInfo_args__isset;

class tcoin_getAccountInfo_args {
 public:

  tcoin_getAccountInfo_args() : tocken(""), app(0), uid(0) {
  }

  virtual ~tcoin_getAccountInfo_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;

  _tcoin_getAccountInfo_args__isset __isset;

  bool operator == (const tcoin_getAccountInfo_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const tcoin_getAccountInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getAccountInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getAccountInfo_pargs {
 public:


  virtual ~tcoin_getAccountInfo_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getAccountInfo_result__isset {
  _tcoin_getAccountInfo_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getAccountInfo_result__isset;

class tcoin_getAccountInfo_result {
 public:

  tcoin_getAccountInfo_result() {
  }

  virtual ~tcoin_getAccountInfo_result() throw() {}

  ACC_INFO success;
  tcoinException ex;

  _tcoin_getAccountInfo_result__isset __isset;

  bool operator == (const tcoin_getAccountInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getAccountInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getAccountInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getAccountInfo_presult__isset {
  _tcoin_getAccountInfo_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getAccountInfo_presult__isset;

class tcoin_getAccountInfo_presult {
 public:


  virtual ~tcoin_getAccountInfo_presult() throw() {}

  ACC_INFO* success;
  tcoinException ex;

  _tcoin_getAccountInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_getBalance_args__isset {
  _tcoin_getBalance_args__isset() : tocken(false), app(false), uid(false) {}
  bool tocken;
  bool app;
  bool uid;
} _tcoin_getBalance_args__isset;

class tcoin_getBalance_args {
 public:

  tcoin_getBalance_args() : tocken(""), app(0), uid(0) {
  }

  virtual ~tcoin_getBalance_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;

  _tcoin_getBalance_args__isset __isset;

  bool operator == (const tcoin_getBalance_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const tcoin_getBalance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getBalance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getBalance_pargs {
 public:


  virtual ~tcoin_getBalance_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getBalance_result__isset {
  _tcoin_getBalance_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getBalance_result__isset;

class tcoin_getBalance_result {
 public:

  tcoin_getBalance_result() : success(0) {
  }

  virtual ~tcoin_getBalance_result() throw() {}

  double success;
  tcoinException ex;

  _tcoin_getBalance_result__isset __isset;

  bool operator == (const tcoin_getBalance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getBalance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getBalance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getBalance_presult__isset {
  _tcoin_getBalance_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getBalance_presult__isset;

class tcoin_getBalance_presult {
 public:


  virtual ~tcoin_getBalance_presult() throw() {}

  double* success;
  tcoinException ex;

  _tcoin_getBalance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_createAccount_args__isset {
  _tcoin_createAccount_args__isset() : tocken(false), app(false), uid(false), name(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool name;
} _tcoin_createAccount_args__isset;

class tcoin_createAccount_args {
 public:

  tcoin_createAccount_args() : tocken(""), app(0), uid(0), name("") {
  }

  virtual ~tcoin_createAccount_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  std::string name;

  _tcoin_createAccount_args__isset __isset;

  bool operator == (const tcoin_createAccount_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const tcoin_createAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_createAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_createAccount_pargs {
 public:


  virtual ~tcoin_createAccount_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_createAccount_result__isset {
  _tcoin_createAccount_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_createAccount_result__isset;

class tcoin_createAccount_result {
 public:

  tcoin_createAccount_result() : success(0) {
  }

  virtual ~tcoin_createAccount_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_createAccount_result__isset __isset;

  bool operator == (const tcoin_createAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_createAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_createAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_createAccount_presult__isset {
  _tcoin_createAccount_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_createAccount_presult__isset;

class tcoin_createAccount_presult {
 public:


  virtual ~tcoin_createAccount_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_createAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_cashIn_args__isset {
  _tcoin_cashIn_args__isset() : tocken(false), app(false), uid(false), amount(false), description(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool amount;
  bool description;
} _tcoin_cashIn_args__isset;

class tcoin_cashIn_args {
 public:

  tcoin_cashIn_args() : tocken(""), app(0), uid(0), amount(0), description("") {
  }

  virtual ~tcoin_cashIn_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  double amount;
  std::string description;

  _tcoin_cashIn_args__isset __isset;

  bool operator == (const tcoin_cashIn_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const tcoin_cashIn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_cashIn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_cashIn_pargs {
 public:


  virtual ~tcoin_cashIn_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const double* amount;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_cashIn_result__isset {
  _tcoin_cashIn_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_cashIn_result__isset;

class tcoin_cashIn_result {
 public:

  tcoin_cashIn_result() : success(0) {
  }

  virtual ~tcoin_cashIn_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_cashIn_result__isset __isset;

  bool operator == (const tcoin_cashIn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_cashIn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_cashIn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_cashIn_presult__isset {
  _tcoin_cashIn_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_cashIn_presult__isset;

class tcoin_cashIn_presult {
 public:


  virtual ~tcoin_cashIn_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_cashIn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_cashIn2_args__isset {
  _tcoin_cashIn2_args__isset() : tocken(false), app(false), uid(false), amount(false), description(false), promotion(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool amount;
  bool description;
  bool promotion;
} _tcoin_cashIn2_args__isset;

class tcoin_cashIn2_args {
 public:

  tcoin_cashIn2_args() : tocken(""), app(0), uid(0), amount(0), description(""), promotion(0) {
  }

  virtual ~tcoin_cashIn2_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  double amount;
  std::string description;
  double promotion;

  _tcoin_cashIn2_args__isset __isset;

  bool operator == (const tcoin_cashIn2_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(promotion == rhs.promotion))
      return false;
    return true;
  }
  bool operator != (const tcoin_cashIn2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_cashIn2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_cashIn2_pargs {
 public:


  virtual ~tcoin_cashIn2_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const double* amount;
  const std::string* description;
  const double* promotion;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_cashIn2_result__isset {
  _tcoin_cashIn2_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_cashIn2_result__isset;

class tcoin_cashIn2_result {
 public:

  tcoin_cashIn2_result() : success(0) {
  }

  virtual ~tcoin_cashIn2_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_cashIn2_result__isset __isset;

  bool operator == (const tcoin_cashIn2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_cashIn2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_cashIn2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_cashIn2_presult__isset {
  _tcoin_cashIn2_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_cashIn2_presult__isset;

class tcoin_cashIn2_presult {
 public:


  virtual ~tcoin_cashIn2_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_cashIn2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_transfer_args__isset {
  _tcoin_transfer_args__isset() : tocken(false), app(false), uid1(false), uid2(false), uname2(false), amount(false), description(false) {}
  bool tocken;
  bool app;
  bool uid1;
  bool uid2;
  bool uname2;
  bool amount;
  bool description;
} _tcoin_transfer_args__isset;

class tcoin_transfer_args {
 public:

  tcoin_transfer_args() : tocken(""), app(0), uid1(0), uid2(0), uname2(""), amount(0), description("") {
  }

  virtual ~tcoin_transfer_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid1;
  int32_t uid2;
  std::string uname2;
  double amount;
  std::string description;

  _tcoin_transfer_args__isset __isset;

  bool operator == (const tcoin_transfer_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid1 == rhs.uid1))
      return false;
    if (!(uid2 == rhs.uid2))
      return false;
    if (!(uname2 == rhs.uname2))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const tcoin_transfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_transfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_transfer_pargs {
 public:


  virtual ~tcoin_transfer_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid1;
  const int32_t* uid2;
  const std::string* uname2;
  const double* amount;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_transfer_result__isset {
  _tcoin_transfer_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_transfer_result__isset;

class tcoin_transfer_result {
 public:

  tcoin_transfer_result() : success(0) {
  }

  virtual ~tcoin_transfer_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_transfer_result__isset __isset;

  bool operator == (const tcoin_transfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_transfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_transfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_transfer_presult__isset {
  _tcoin_transfer_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_transfer_presult__isset;

class tcoin_transfer_presult {
 public:


  virtual ~tcoin_transfer_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_transfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_transfer2_args__isset {
  _tcoin_transfer2_args__isset() : tocken(false), app(false), uid1(false), uid2(false), uname2(false), amount(false), description(false), cost(false) {}
  bool tocken;
  bool app;
  bool uid1;
  bool uid2;
  bool uname2;
  bool amount;
  bool description;
  bool cost;
} _tcoin_transfer2_args__isset;

class tcoin_transfer2_args {
 public:

  tcoin_transfer2_args() : tocken(""), app(0), uid1(0), uid2(0), uname2(""), amount(0), description(""), cost(0) {
  }

  virtual ~tcoin_transfer2_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid1;
  int32_t uid2;
  std::string uname2;
  double amount;
  std::string description;
  double cost;

  _tcoin_transfer2_args__isset __isset;

  bool operator == (const tcoin_transfer2_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid1 == rhs.uid1))
      return false;
    if (!(uid2 == rhs.uid2))
      return false;
    if (!(uname2 == rhs.uname2))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(cost == rhs.cost))
      return false;
    return true;
  }
  bool operator != (const tcoin_transfer2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_transfer2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_transfer2_pargs {
 public:


  virtual ~tcoin_transfer2_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid1;
  const int32_t* uid2;
  const std::string* uname2;
  const double* amount;
  const std::string* description;
  const double* cost;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_transfer2_result__isset {
  _tcoin_transfer2_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_transfer2_result__isset;

class tcoin_transfer2_result {
 public:

  tcoin_transfer2_result() : success(0) {
  }

  virtual ~tcoin_transfer2_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_transfer2_result__isset __isset;

  bool operator == (const tcoin_transfer2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_transfer2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_transfer2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_transfer2_presult__isset {
  _tcoin_transfer2_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_transfer2_presult__isset;

class tcoin_transfer2_presult {
 public:


  virtual ~tcoin_transfer2_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_transfer2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_exchange_args__isset {
  _tcoin_exchange_args__isset() : tocken(false), app(false), uid(false), to_app(false), amount(false), description(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool to_app;
  bool amount;
  bool description;
} _tcoin_exchange_args__isset;

class tcoin_exchange_args {
 public:

  tcoin_exchange_args() : tocken(""), app(0), uid(0), to_app(0), amount(0), description("") {
  }

  virtual ~tcoin_exchange_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  int32_t to_app;
  double amount;
  std::string description;

  _tcoin_exchange_args__isset __isset;

  bool operator == (const tcoin_exchange_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(to_app == rhs.to_app))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(description == rhs.description))
      return false;
    return true;
  }
  bool operator != (const tcoin_exchange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_exchange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_exchange_pargs {
 public:


  virtual ~tcoin_exchange_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const int32_t* to_app;
  const double* amount;
  const std::string* description;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_exchange_result__isset {
  _tcoin_exchange_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_exchange_result__isset;

class tcoin_exchange_result {
 public:

  tcoin_exchange_result() : success(0) {
  }

  virtual ~tcoin_exchange_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_exchange_result__isset __isset;

  bool operator == (const tcoin_exchange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_exchange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_exchange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_exchange_presult__isset {
  _tcoin_exchange_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_exchange_presult__isset;

class tcoin_exchange_presult {
 public:


  virtual ~tcoin_exchange_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_exchange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_exchange2_args__isset {
  _tcoin_exchange2_args__isset() : tocken(false), app(false), uid(false), to_app(false), amount(false), description(false), promotion_amount(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool to_app;
  bool amount;
  bool description;
  bool promotion_amount;
} _tcoin_exchange2_args__isset;

class tcoin_exchange2_args {
 public:

  tcoin_exchange2_args() : tocken(""), app(0), uid(0), to_app(0), amount(0), description(""), promotion_amount(0) {
  }

  virtual ~tcoin_exchange2_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  int32_t to_app;
  double amount;
  std::string description;
  double promotion_amount;

  _tcoin_exchange2_args__isset __isset;

  bool operator == (const tcoin_exchange2_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(to_app == rhs.to_app))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(promotion_amount == rhs.promotion_amount))
      return false;
    return true;
  }
  bool operator != (const tcoin_exchange2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_exchange2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_exchange2_pargs {
 public:


  virtual ~tcoin_exchange2_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const int32_t* to_app;
  const double* amount;
  const std::string* description;
  const double* promotion_amount;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_exchange2_result__isset {
  _tcoin_exchange2_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_exchange2_result__isset;

class tcoin_exchange2_result {
 public:

  tcoin_exchange2_result() : success(0) {
  }

  virtual ~tcoin_exchange2_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_exchange2_result__isset __isset;

  bool operator == (const tcoin_exchange2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_exchange2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_exchange2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_exchange2_presult__isset {
  _tcoin_exchange2_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_exchange2_presult__isset;

class tcoin_exchange2_presult {
 public:


  virtual ~tcoin_exchange2_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_exchange2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_searchUserTransaction_args__isset {
  _tcoin_searchUserTransaction_args__isset() : tocken(false), app(false), uid(false), cond(false), page(false), limit(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool cond;
  bool page;
  bool limit;
} _tcoin_searchUserTransaction_args__isset;

class tcoin_searchUserTransaction_args {
 public:

  tcoin_searchUserTransaction_args() : tocken(""), app(0), uid(0), page(0), limit(0) {
  }

  virtual ~tcoin_searchUserTransaction_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  SEARCH_COND cond;
  int32_t page;
  int32_t limit;

  _tcoin_searchUserTransaction_args__isset __isset;

  bool operator == (const tcoin_searchUserTransaction_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(cond == rhs.cond))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const tcoin_searchUserTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_searchUserTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_searchUserTransaction_pargs {
 public:


  virtual ~tcoin_searchUserTransaction_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const SEARCH_COND* cond;
  const int32_t* page;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_searchUserTransaction_result__isset {
  _tcoin_searchUserTransaction_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_searchUserTransaction_result__isset;

class tcoin_searchUserTransaction_result {
 public:

  tcoin_searchUserTransaction_result() {
  }

  virtual ~tcoin_searchUserTransaction_result() throw() {}

  TRANS_DETAIL_RESULT success;
  tcoinException ex;

  _tcoin_searchUserTransaction_result__isset __isset;

  bool operator == (const tcoin_searchUserTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_searchUserTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_searchUserTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_searchUserTransaction_presult__isset {
  _tcoin_searchUserTransaction_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_searchUserTransaction_presult__isset;

class tcoin_searchUserTransaction_presult {
 public:


  virtual ~tcoin_searchUserTransaction_presult() throw() {}

  TRANS_DETAIL_RESULT* success;
  tcoinException ex;

  _tcoin_searchUserTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_getExchangeRate_args__isset {
  _tcoin_getExchangeRate_args__isset() : tocken(false), app1(false), app2(false) {}
  bool tocken;
  bool app1;
  bool app2;
} _tcoin_getExchangeRate_args__isset;

class tcoin_getExchangeRate_args {
 public:

  tcoin_getExchangeRate_args() : tocken(""), app1(0), app2(0) {
  }

  virtual ~tcoin_getExchangeRate_args() throw() {}

  std::string tocken;
  int32_t app1;
  int32_t app2;

  _tcoin_getExchangeRate_args__isset __isset;

  bool operator == (const tcoin_getExchangeRate_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app1 == rhs.app1))
      return false;
    if (!(app2 == rhs.app2))
      return false;
    return true;
  }
  bool operator != (const tcoin_getExchangeRate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getExchangeRate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getExchangeRate_pargs {
 public:


  virtual ~tcoin_getExchangeRate_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app1;
  const int32_t* app2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getExchangeRate_result__isset {
  _tcoin_getExchangeRate_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getExchangeRate_result__isset;

class tcoin_getExchangeRate_result {
 public:

  tcoin_getExchangeRate_result() {
  }

  virtual ~tcoin_getExchangeRate_result() throw() {}

  EX_RATE success;
  tcoinException ex;

  _tcoin_getExchangeRate_result__isset __isset;

  bool operator == (const tcoin_getExchangeRate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getExchangeRate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getExchangeRate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getExchangeRate_presult__isset {
  _tcoin_getExchangeRate_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getExchangeRate_presult__isset;

class tcoin_getExchangeRate_presult {
 public:


  virtual ~tcoin_getExchangeRate_presult() throw() {}

  EX_RATE* success;
  tcoinException ex;

  _tcoin_getExchangeRate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_getUserAccountList_args__isset {
  _tcoin_getUserAccountList_args__isset() : tocken(false), uid(false) {}
  bool tocken;
  bool uid;
} _tcoin_getUserAccountList_args__isset;

class tcoin_getUserAccountList_args {
 public:

  tcoin_getUserAccountList_args() : tocken(""), uid(0) {
  }

  virtual ~tcoin_getUserAccountList_args() throw() {}

  std::string tocken;
  int32_t uid;

  _tcoin_getUserAccountList_args__isset __isset;

  bool operator == (const tcoin_getUserAccountList_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const tcoin_getUserAccountList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getUserAccountList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getUserAccountList_pargs {
 public:


  virtual ~tcoin_getUserAccountList_pargs() throw() {}

  const std::string* tocken;
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getUserAccountList_result__isset {
  _tcoin_getUserAccountList_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getUserAccountList_result__isset;

class tcoin_getUserAccountList_result {
 public:

  tcoin_getUserAccountList_result() {
  }

  virtual ~tcoin_getUserAccountList_result() throw() {}

  std::vector<ACC_INFO>  success;
  tcoinException ex;

  _tcoin_getUserAccountList_result__isset __isset;

  bool operator == (const tcoin_getUserAccountList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getUserAccountList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getUserAccountList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getUserAccountList_presult__isset {
  _tcoin_getUserAccountList_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getUserAccountList_presult__isset;

class tcoin_getUserAccountList_presult {
 public:


  virtual ~tcoin_getUserAccountList_presult() throw() {}

  std::vector<ACC_INFO> * success;
  tcoinException ex;

  _tcoin_getUserAccountList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_getTransferableUserAccountList_args__isset {
  _tcoin_getTransferableUserAccountList_args__isset() : tocken(false), uid(false) {}
  bool tocken;
  bool uid;
} _tcoin_getTransferableUserAccountList_args__isset;

class tcoin_getTransferableUserAccountList_args {
 public:

  tcoin_getTransferableUserAccountList_args() : tocken(""), uid(0) {
  }

  virtual ~tcoin_getTransferableUserAccountList_args() throw() {}

  std::string tocken;
  int32_t uid;

  _tcoin_getTransferableUserAccountList_args__isset __isset;

  bool operator == (const tcoin_getTransferableUserAccountList_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const tcoin_getTransferableUserAccountList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getTransferableUserAccountList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getTransferableUserAccountList_pargs {
 public:


  virtual ~tcoin_getTransferableUserAccountList_pargs() throw() {}

  const std::string* tocken;
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getTransferableUserAccountList_result__isset {
  _tcoin_getTransferableUserAccountList_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getTransferableUserAccountList_result__isset;

class tcoin_getTransferableUserAccountList_result {
 public:

  tcoin_getTransferableUserAccountList_result() {
  }

  virtual ~tcoin_getTransferableUserAccountList_result() throw() {}

  std::vector<ACC_INFO>  success;
  tcoinException ex;

  _tcoin_getTransferableUserAccountList_result__isset __isset;

  bool operator == (const tcoin_getTransferableUserAccountList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getTransferableUserAccountList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getTransferableUserAccountList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getTransferableUserAccountList_presult__isset {
  _tcoin_getTransferableUserAccountList_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getTransferableUserAccountList_presult__isset;

class tcoin_getTransferableUserAccountList_presult {
 public:


  virtual ~tcoin_getTransferableUserAccountList_presult() throw() {}

  std::vector<ACC_INFO> * success;
  tcoinException ex;

  _tcoin_getTransferableUserAccountList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_getAppInfo_args__isset {
  _tcoin_getAppInfo_args__isset() : tocken(false), app(false) {}
  bool tocken;
  bool app;
} _tcoin_getAppInfo_args__isset;

class tcoin_getAppInfo_args {
 public:

  tcoin_getAppInfo_args() : tocken(""), app(0) {
  }

  virtual ~tcoin_getAppInfo_args() throw() {}

  std::string tocken;
  int32_t app;

  _tcoin_getAppInfo_args__isset __isset;

  bool operator == (const tcoin_getAppInfo_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    return true;
  }
  bool operator != (const tcoin_getAppInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getAppInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getAppInfo_pargs {
 public:


  virtual ~tcoin_getAppInfo_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getAppInfo_result__isset {
  _tcoin_getAppInfo_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getAppInfo_result__isset;

class tcoin_getAppInfo_result {
 public:

  tcoin_getAppInfo_result() {
  }

  virtual ~tcoin_getAppInfo_result() throw() {}

  APP_INFO success;
  tcoinException ex;

  _tcoin_getAppInfo_result__isset __isset;

  bool operator == (const tcoin_getAppInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getAppInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getAppInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getAppInfo_presult__isset {
  _tcoin_getAppInfo_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getAppInfo_presult__isset;

class tcoin_getAppInfo_presult {
 public:


  virtual ~tcoin_getAppInfo_presult() throw() {}

  APP_INFO* success;
  tcoinException ex;

  _tcoin_getAppInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_payment_args__isset {
  _tcoin_payment_args__isset() : tocken(false), app(false), cre_uid(false), cre_amt(false), cre_desc(false), deb_uid(false), deb_name(false), deb_amt(false), deb_desc(false) {}
  bool tocken;
  bool app;
  bool cre_uid;
  bool cre_amt;
  bool cre_desc;
  bool deb_uid;
  bool deb_name;
  bool deb_amt;
  bool deb_desc;
} _tcoin_payment_args__isset;

class tcoin_payment_args {
 public:

  tcoin_payment_args() : tocken(""), app(0) {
  }

  virtual ~tcoin_payment_args() throw() {}

  std::string tocken;
  int32_t app;
  std::vector<int32_t>  cre_uid;
  std::vector<double>  cre_amt;
  std::vector<std::string>  cre_desc;
  std::vector<int32_t>  deb_uid;
  std::vector<std::string>  deb_name;
  std::vector<double>  deb_amt;
  std::vector<std::string>  deb_desc;

  _tcoin_payment_args__isset __isset;

  bool operator == (const tcoin_payment_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(cre_uid == rhs.cre_uid))
      return false;
    if (!(cre_amt == rhs.cre_amt))
      return false;
    if (!(cre_desc == rhs.cre_desc))
      return false;
    if (!(deb_uid == rhs.deb_uid))
      return false;
    if (!(deb_name == rhs.deb_name))
      return false;
    if (!(deb_amt == rhs.deb_amt))
      return false;
    if (!(deb_desc == rhs.deb_desc))
      return false;
    return true;
  }
  bool operator != (const tcoin_payment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_payment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_payment_pargs {
 public:


  virtual ~tcoin_payment_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const std::vector<int32_t> * cre_uid;
  const std::vector<double> * cre_amt;
  const std::vector<std::string> * cre_desc;
  const std::vector<int32_t> * deb_uid;
  const std::vector<std::string> * deb_name;
  const std::vector<double> * deb_amt;
  const std::vector<std::string> * deb_desc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_payment_result__isset {
  _tcoin_payment_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_payment_result__isset;

class tcoin_payment_result {
 public:

  tcoin_payment_result() {
  }

  virtual ~tcoin_payment_result() throw() {}

  std::map<int32_t, double>  success;
  tcoinException ex;

  _tcoin_payment_result__isset __isset;

  bool operator == (const tcoin_payment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_payment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_payment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_payment_presult__isset {
  _tcoin_payment_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_payment_presult__isset;

class tcoin_payment_presult {
 public:


  virtual ~tcoin_payment_presult() throw() {}

  std::map<int32_t, double> * success;
  tcoinException ex;

  _tcoin_payment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_getAccountStatus_args__isset {
  _tcoin_getAccountStatus_args__isset() : tocken(false), app(false), uid(false) {}
  bool tocken;
  bool app;
  bool uid;
} _tcoin_getAccountStatus_args__isset;

class tcoin_getAccountStatus_args {
 public:

  tcoin_getAccountStatus_args() : tocken(""), app(0), uid(0) {
  }

  virtual ~tcoin_getAccountStatus_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;

  _tcoin_getAccountStatus_args__isset __isset;

  bool operator == (const tcoin_getAccountStatus_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const tcoin_getAccountStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getAccountStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_getAccountStatus_pargs {
 public:


  virtual ~tcoin_getAccountStatus_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getAccountStatus_result__isset {
  _tcoin_getAccountStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getAccountStatus_result__isset;

class tcoin_getAccountStatus_result {
 public:

  tcoin_getAccountStatus_result() {
  }

  virtual ~tcoin_getAccountStatus_result() throw() {}

  ACC_STATUS success;
  tcoinException ex;

  _tcoin_getAccountStatus_result__isset __isset;

  bool operator == (const tcoin_getAccountStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_getAccountStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_getAccountStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_getAccountStatus_presult__isset {
  _tcoin_getAccountStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_getAccountStatus_presult__isset;

class tcoin_getAccountStatus_presult {
 public:


  virtual ~tcoin_getAccountStatus_presult() throw() {}

  ACC_STATUS* success;
  tcoinException ex;

  _tcoin_getAccountStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_setAccountStatus_args__isset {
  _tcoin_setAccountStatus_args__isset() : tocken(false), app(false), uid(false), status(false) {}
  bool tocken;
  bool app;
  bool uid;
  bool status;
} _tcoin_setAccountStatus_args__isset;

class tcoin_setAccountStatus_args {
 public:

  tcoin_setAccountStatus_args() : tocken(""), app(0), uid(0) {
  }

  virtual ~tcoin_setAccountStatus_args() throw() {}

  std::string tocken;
  int32_t app;
  int32_t uid;
  ACC_STATUS status;

  _tcoin_setAccountStatus_args__isset __isset;

  bool operator == (const tcoin_setAccountStatus_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(app == rhs.app))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const tcoin_setAccountStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_setAccountStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_setAccountStatus_pargs {
 public:


  virtual ~tcoin_setAccountStatus_pargs() throw() {}

  const std::string* tocken;
  const int32_t* app;
  const int32_t* uid;
  const ACC_STATUS* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_setAccountStatus_result__isset {
  _tcoin_setAccountStatus_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_setAccountStatus_result__isset;

class tcoin_setAccountStatus_result {
 public:

  tcoin_setAccountStatus_result() : success(0) {
  }

  virtual ~tcoin_setAccountStatus_result() throw() {}

  int32_t success;
  tcoinException ex;

  _tcoin_setAccountStatus_result__isset __isset;

  bool operator == (const tcoin_setAccountStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_setAccountStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_setAccountStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_setAccountStatus_presult__isset {
  _tcoin_setAccountStatus_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_setAccountStatus_presult__isset;

class tcoin_setAccountStatus_presult {
 public:


  virtual ~tcoin_setAccountStatus_presult() throw() {}

  int32_t* success;
  tcoinException ex;

  _tcoin_setAccountStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_searchTransaction_args__isset {
  _tcoin_searchTransaction_args__isset() : tocken(false), cond(false) {}
  bool tocken;
  bool cond;
} _tcoin_searchTransaction_args__isset;

class tcoin_searchTransaction_args {
 public:

  tcoin_searchTransaction_args() : tocken("") {
  }

  virtual ~tcoin_searchTransaction_args() throw() {}

  std::string tocken;
  SEARCH_COND cond;

  _tcoin_searchTransaction_args__isset __isset;

  bool operator == (const tcoin_searchTransaction_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(cond == rhs.cond))
      return false;
    return true;
  }
  bool operator != (const tcoin_searchTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_searchTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_searchTransaction_pargs {
 public:


  virtual ~tcoin_searchTransaction_pargs() throw() {}

  const std::string* tocken;
  const SEARCH_COND* cond;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_searchTransaction_result__isset {
  _tcoin_searchTransaction_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_searchTransaction_result__isset;

class tcoin_searchTransaction_result {
 public:

  tcoin_searchTransaction_result() {
  }

  virtual ~tcoin_searchTransaction_result() throw() {}

  TRANS_SEARCH_RESULT success;
  tcoinException ex;

  _tcoin_searchTransaction_result__isset __isset;

  bool operator == (const tcoin_searchTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_searchTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_searchTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_searchTransaction_presult__isset {
  _tcoin_searchTransaction_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_searchTransaction_presult__isset;

class tcoin_searchTransaction_presult {
 public:


  virtual ~tcoin_searchTransaction_presult() throw() {}

  TRANS_SEARCH_RESULT* success;
  tcoinException ex;

  _tcoin_searchTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _tcoin_searchAccount_args__isset {
  _tcoin_searchAccount_args__isset() : tocken(false), cond(false), page(false), limit(false) {}
  bool tocken;
  bool cond;
  bool page;
  bool limit;
} _tcoin_searchAccount_args__isset;

class tcoin_searchAccount_args {
 public:

  tcoin_searchAccount_args() : tocken(""), page(0), limit(0) {
  }

  virtual ~tcoin_searchAccount_args() throw() {}

  std::string tocken;
  SEARCH_COND cond;
  int32_t page;
  int32_t limit;

  _tcoin_searchAccount_args__isset __isset;

  bool operator == (const tcoin_searchAccount_args & rhs) const
  {
    if (!(tocken == rhs.tocken))
      return false;
    if (!(cond == rhs.cond))
      return false;
    if (!(page == rhs.page))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const tcoin_searchAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_searchAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class tcoin_searchAccount_pargs {
 public:


  virtual ~tcoin_searchAccount_pargs() throw() {}

  const std::string* tocken;
  const SEARCH_COND* cond;
  const int32_t* page;
  const int32_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_searchAccount_result__isset {
  _tcoin_searchAccount_result__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_searchAccount_result__isset;

class tcoin_searchAccount_result {
 public:

  tcoin_searchAccount_result() {
  }

  virtual ~tcoin_searchAccount_result() throw() {}

  ACC_SEARCH_RESULT success;
  tcoinException ex;

  _tcoin_searchAccount_result__isset __isset;

  bool operator == (const tcoin_searchAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const tcoin_searchAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const tcoin_searchAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _tcoin_searchAccount_presult__isset {
  _tcoin_searchAccount_presult__isset() : success(false), ex(false) {}
  bool success;
  bool ex;
} _tcoin_searchAccount_presult__isset;

class tcoin_searchAccount_presult {
 public:


  virtual ~tcoin_searchAccount_presult() throw() {}

  ACC_SEARCH_RESULT* success;
  tcoinException ex;

  _tcoin_searchAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class tcoinClient : virtual public tcoinIf {
 public:
  tcoinClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  tcoinClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAccountInfo(ACC_INFO& _return, const std::string& tocken, const int32_t app, const int32_t uid);
  void send_getAccountInfo(const std::string& tocken, const int32_t app, const int32_t uid);
  void recv_getAccountInfo(ACC_INFO& _return);
  double getBalance(const std::string& tocken, const int32_t app, const int32_t uid);
  void send_getBalance(const std::string& tocken, const int32_t app, const int32_t uid);
  double recv_getBalance();
  int32_t createAccount(const std::string& tocken, const int32_t app, const int32_t uid, const std::string& name);
  void send_createAccount(const std::string& tocken, const int32_t app, const int32_t uid, const std::string& name);
  int32_t recv_createAccount();
  int32_t cashIn(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description);
  void send_cashIn(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description);
  int32_t recv_cashIn();
  int32_t cashIn2(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description, const double promotion);
  void send_cashIn2(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description, const double promotion);
  int32_t recv_cashIn2();
  int32_t transfer(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description);
  void send_transfer(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description);
  int32_t recv_transfer();
  int32_t transfer2(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description, const double cost);
  void send_transfer2(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description, const double cost);
  int32_t recv_transfer2();
  int32_t exchange(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description);
  void send_exchange(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description);
  int32_t recv_exchange();
  int32_t exchange2(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description, const double promotion_amount);
  void send_exchange2(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description, const double promotion_amount);
  int32_t recv_exchange2();
  void searchUserTransaction(TRANS_DETAIL_RESULT& _return, const std::string& tocken, const int32_t app, const int32_t uid, const SEARCH_COND& cond, const int32_t page, const int32_t limit);
  void send_searchUserTransaction(const std::string& tocken, const int32_t app, const int32_t uid, const SEARCH_COND& cond, const int32_t page, const int32_t limit);
  void recv_searchUserTransaction(TRANS_DETAIL_RESULT& _return);
  void getExchangeRate(EX_RATE& _return, const std::string& tocken, const int32_t app1, const int32_t app2);
  void send_getExchangeRate(const std::string& tocken, const int32_t app1, const int32_t app2);
  void recv_getExchangeRate(EX_RATE& _return);
  void getUserAccountList(std::vector<ACC_INFO> & _return, const std::string& tocken, const int32_t uid);
  void send_getUserAccountList(const std::string& tocken, const int32_t uid);
  void recv_getUserAccountList(std::vector<ACC_INFO> & _return);
  void getTransferableUserAccountList(std::vector<ACC_INFO> & _return, const std::string& tocken, const int32_t uid);
  void send_getTransferableUserAccountList(const std::string& tocken, const int32_t uid);
  void recv_getTransferableUserAccountList(std::vector<ACC_INFO> & _return);
  void getAppInfo(APP_INFO& _return, const std::string& tocken, const int32_t app);
  void send_getAppInfo(const std::string& tocken, const int32_t app);
  void recv_getAppInfo(APP_INFO& _return);
  void payment(std::map<int32_t, double> & _return, const std::string& tocken, const int32_t app, const std::vector<int32_t> & cre_uid, const std::vector<double> & cre_amt, const std::vector<std::string> & cre_desc, const std::vector<int32_t> & deb_uid, const std::vector<std::string> & deb_name, const std::vector<double> & deb_amt, const std::vector<std::string> & deb_desc);
  void send_payment(const std::string& tocken, const int32_t app, const std::vector<int32_t> & cre_uid, const std::vector<double> & cre_amt, const std::vector<std::string> & cre_desc, const std::vector<int32_t> & deb_uid, const std::vector<std::string> & deb_name, const std::vector<double> & deb_amt, const std::vector<std::string> & deb_desc);
  void recv_payment(std::map<int32_t, double> & _return);
  ACC_STATUS getAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid);
  void send_getAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid);
  ACC_STATUS recv_getAccountStatus();
  int32_t setAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid, const ACC_STATUS status);
  void send_setAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid, const ACC_STATUS status);
  int32_t recv_setAccountStatus();
  void searchTransaction(TRANS_SEARCH_RESULT& _return, const std::string& tocken, const SEARCH_COND& cond);
  void send_searchTransaction(const std::string& tocken, const SEARCH_COND& cond);
  void recv_searchTransaction(TRANS_SEARCH_RESULT& _return);
  void searchAccount(ACC_SEARCH_RESULT& _return, const std::string& tocken, const SEARCH_COND& cond, const int32_t page, const int32_t limit);
  void send_searchAccount(const std::string& tocken, const SEARCH_COND& cond, const int32_t page, const int32_t limit);
  void recv_searchAccount(ACC_SEARCH_RESULT& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class tcoinProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<tcoinIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (tcoinProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_getAccountInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getBalance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_createAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_cashIn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_cashIn2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_transfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_transfer2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_exchange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_exchange2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_searchUserTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getExchangeRate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getUserAccountList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getTransferableUserAccountList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getAppInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_payment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_getAccountStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_setAccountStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_searchTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_searchAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  tcoinProcessor(boost::shared_ptr<tcoinIf> iface) :
    iface_(iface) {
    processMap_["getAccountInfo"] = &tcoinProcessor::process_getAccountInfo;
    processMap_["getBalance"] = &tcoinProcessor::process_getBalance;
    processMap_["createAccount"] = &tcoinProcessor::process_createAccount;
    processMap_["cashIn"] = &tcoinProcessor::process_cashIn;
    processMap_["cashIn2"] = &tcoinProcessor::process_cashIn2;
    processMap_["transfer"] = &tcoinProcessor::process_transfer;
    processMap_["transfer2"] = &tcoinProcessor::process_transfer2;
    processMap_["exchange"] = &tcoinProcessor::process_exchange;
    processMap_["exchange2"] = &tcoinProcessor::process_exchange2;
    processMap_["searchUserTransaction"] = &tcoinProcessor::process_searchUserTransaction;
    processMap_["getExchangeRate"] = &tcoinProcessor::process_getExchangeRate;
    processMap_["getUserAccountList"] = &tcoinProcessor::process_getUserAccountList;
    processMap_["getTransferableUserAccountList"] = &tcoinProcessor::process_getTransferableUserAccountList;
    processMap_["getAppInfo"] = &tcoinProcessor::process_getAppInfo;
    processMap_["payment"] = &tcoinProcessor::process_payment;
    processMap_["getAccountStatus"] = &tcoinProcessor::process_getAccountStatus;
    processMap_["setAccountStatus"] = &tcoinProcessor::process_setAccountStatus;
    processMap_["searchTransaction"] = &tcoinProcessor::process_searchTransaction;
    processMap_["searchAccount"] = &tcoinProcessor::process_searchAccount;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~tcoinProcessor() {}
};

class tcoinMultiface : virtual public tcoinIf {
 public:
  tcoinMultiface(std::vector<boost::shared_ptr<tcoinIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~tcoinMultiface() {}
 protected:
  std::vector<boost::shared_ptr<tcoinIf> > ifaces_;
  tcoinMultiface() {}
  void add(boost::shared_ptr<tcoinIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAccountInfo(ACC_INFO& _return, const std::string& tocken, const int32_t app, const int32_t uid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAccountInfo(_return, tocken, app, uid);
        return;
      } else {
        ifaces_[i]->getAccountInfo(_return, tocken, app, uid);
      }
    }
  }

  double getBalance(const std::string& tocken, const int32_t app, const int32_t uid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getBalance(tocken, app, uid);
      } else {
        ifaces_[i]->getBalance(tocken, app, uid);
      }
    }
  }

  int32_t createAccount(const std::string& tocken, const int32_t app, const int32_t uid, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->createAccount(tocken, app, uid, name);
      } else {
        ifaces_[i]->createAccount(tocken, app, uid, name);
      }
    }
  }

  int32_t cashIn(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->cashIn(tocken, app, uid, amount, description);
      } else {
        ifaces_[i]->cashIn(tocken, app, uid, amount, description);
      }
    }
  }

  int32_t cashIn2(const std::string& tocken, const int32_t app, const int32_t uid, const double amount, const std::string& description, const double promotion) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->cashIn2(tocken, app, uid, amount, description, promotion);
      } else {
        ifaces_[i]->cashIn2(tocken, app, uid, amount, description, promotion);
      }
    }
  }

  int32_t transfer(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->transfer(tocken, app, uid1, uid2, uname2, amount, description);
      } else {
        ifaces_[i]->transfer(tocken, app, uid1, uid2, uname2, amount, description);
      }
    }
  }

  int32_t transfer2(const std::string& tocken, const int32_t app, const int32_t uid1, const int32_t uid2, const std::string& uname2, const double amount, const std::string& description, const double cost) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->transfer2(tocken, app, uid1, uid2, uname2, amount, description, cost);
      } else {
        ifaces_[i]->transfer2(tocken, app, uid1, uid2, uname2, amount, description, cost);
      }
    }
  }

  int32_t exchange(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->exchange(tocken, app, uid, to_app, amount, description);
      } else {
        ifaces_[i]->exchange(tocken, app, uid, to_app, amount, description);
      }
    }
  }

  int32_t exchange2(const std::string& tocken, const int32_t app, const int32_t uid, const int32_t to_app, const double amount, const std::string& description, const double promotion_amount) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->exchange2(tocken, app, uid, to_app, amount, description, promotion_amount);
      } else {
        ifaces_[i]->exchange2(tocken, app, uid, to_app, amount, description, promotion_amount);
      }
    }
  }

  void searchUserTransaction(TRANS_DETAIL_RESULT& _return, const std::string& tocken, const int32_t app, const int32_t uid, const SEARCH_COND& cond, const int32_t page, const int32_t limit) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->searchUserTransaction(_return, tocken, app, uid, cond, page, limit);
        return;
      } else {
        ifaces_[i]->searchUserTransaction(_return, tocken, app, uid, cond, page, limit);
      }
    }
  }

  void getExchangeRate(EX_RATE& _return, const std::string& tocken, const int32_t app1, const int32_t app2) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getExchangeRate(_return, tocken, app1, app2);
        return;
      } else {
        ifaces_[i]->getExchangeRate(_return, tocken, app1, app2);
      }
    }
  }

  void getUserAccountList(std::vector<ACC_INFO> & _return, const std::string& tocken, const int32_t uid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getUserAccountList(_return, tocken, uid);
        return;
      } else {
        ifaces_[i]->getUserAccountList(_return, tocken, uid);
      }
    }
  }

  void getTransferableUserAccountList(std::vector<ACC_INFO> & _return, const std::string& tocken, const int32_t uid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getTransferableUserAccountList(_return, tocken, uid);
        return;
      } else {
        ifaces_[i]->getTransferableUserAccountList(_return, tocken, uid);
      }
    }
  }

  void getAppInfo(APP_INFO& _return, const std::string& tocken, const int32_t app) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAppInfo(_return, tocken, app);
        return;
      } else {
        ifaces_[i]->getAppInfo(_return, tocken, app);
      }
    }
  }

  void payment(std::map<int32_t, double> & _return, const std::string& tocken, const int32_t app, const std::vector<int32_t> & cre_uid, const std::vector<double> & cre_amt, const std::vector<std::string> & cre_desc, const std::vector<int32_t> & deb_uid, const std::vector<std::string> & deb_name, const std::vector<double> & deb_amt, const std::vector<std::string> & deb_desc) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->payment(_return, tocken, app, cre_uid, cre_amt, cre_desc, deb_uid, deb_name, deb_amt, deb_desc);
        return;
      } else {
        ifaces_[i]->payment(_return, tocken, app, cre_uid, cre_amt, cre_desc, deb_uid, deb_name, deb_amt, deb_desc);
      }
    }
  }

  ACC_STATUS getAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getAccountStatus(tocken, app, uid);
      } else {
        ifaces_[i]->getAccountStatus(tocken, app, uid);
      }
    }
  }

  int32_t setAccountStatus(const std::string& tocken, const int32_t app, const int32_t uid, const ACC_STATUS status) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->setAccountStatus(tocken, app, uid, status);
      } else {
        ifaces_[i]->setAccountStatus(tocken, app, uid, status);
      }
    }
  }

  void searchTransaction(TRANS_SEARCH_RESULT& _return, const std::string& tocken, const SEARCH_COND& cond) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->searchTransaction(_return, tocken, cond);
        return;
      } else {
        ifaces_[i]->searchTransaction(_return, tocken, cond);
      }
    }
  }

  void searchAccount(ACC_SEARCH_RESULT& _return, const std::string& tocken, const SEARCH_COND& cond, const int32_t page, const int32_t limit) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->searchAccount(_return, tocken, cond, page, limit);
        return;
      } else {
        ifaces_[i]->searchAccount(_return, tocken, cond, page, limit);
      }
    }
  }

};

}} // namespace

#endif
